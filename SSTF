#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <limits.h>

#define SECTORSPERTRACK 200
#define TRACKSPERCYLINDER 8
#define CYLINDERS 500000
#define RPM 10000
#define PHYSICALSECTORSIZE 512
#define LOGICALBLOCKSIZE 4096
#define TRACKTOTRACKSEEK 16
const double TRANSFERRATE = 1000000000;

typedef struct {
    double arrivalTime;
    int lbn;
    int request_size;
    int psn;
    int cylinder;
    int surface;
    double sector_offset;
} DiskRequest;

void calculate_disk_geometry(DiskRequest *request) {
    request->psn = request->lbn * 8;
    request->cylinder = request->psn / (SECTORSPERTRACK * TRACKSPERCYLINDER);
    int sectorsPerCylinder = SECTORSPERTRACK * TRACKSPERCYLINDER;
    request->surface = (request->psn % sectorsPerCylinder) / SECTORSPERTRACK;
    request->sector_offset = request->psn % SECTORSPERTRACK;
}

void sstf(DiskRequest *requests, int count, const char *outputFile) {
    FILE *file = fopen(outputFile, "w");
    if (file == 0) {
        printf("Error opening the output file during SSTF\n");
        return;
    }

    double currentTime = 0;
    int currCylinder = 0;
    double currentSectorOffset = 0;
    int *processed = (int *)calloc(count, sizeof(int));
    int processedCount = 0;

    while (processedCount < count) {
        int nextRequestIndex = -1;
        int shortestSeekDistance = INT_MAX;

        //shortest time seach
        for (int i = 0; i < count; i++) {
            if (!processed[i] && requests[i].arrivalTime <= currentTime) {
                int seekDistance = abs(currCylinder - requests[i].cylinder);
                if (seekDistance < shortestSeekDistance) {
                    shortestSeekDistance = seekDistance;
                    nextRequestIndex = i;
                }
            }
        }

        //move time forward
        if (nextRequestIndex == -1) {
            for (int i = 0; i < count; i++) {
                if (!processed[i]) {
                    nextRequestIndex = i;
                    currentTime = requests[i].arrivalTime;
                    break;
                }
            }
        }

        if (nextRequestIndex == -1) {
            break;
        }

        DiskRequest *request = &requests[nextRequestIndex];
        processed[nextRequestIndex] = 1;
        processedCount++;
        //calculate info
        int seekDistance = abs(currCylinder - request->cylinder);
        double seekTime = (seekDistance == 0) ? 0 : ((0.000028 * seekDistance) + 2) / 1000.0;
        double rotationPeriod = 60.0 / RPM;
        double sectorsPerSecond = SECTORSPERTRACK / rotationPeriod;
        double sectorsPassedDuringSeek = seekTime * sectorsPerSecond;
        currentSectorOffset += sectorsPassedDuringSeek;
        currentSectorOffset = fmod(currentSectorOffset, SECTORSPERTRACK);
        double travelTimePerSector = rotationPeriod / SECTORSPERTRACK;
        double sectorsToGo = (currentSectorOffset <= request->sector_offset) ?
                             request->sector_offset - currentSectorOffset :
                             SECTORSPERTRACK - (currentSectorOffset - request->sector_offset);
        double rotationalLatency = sectorsToGo * travelTimePerSector;
        double transferTime = (request->request_size * LOGICALBLOCKSIZE) / TRANSFERRATE;
        double waitTime = (currentTime > request->arrivalTime) ?
                          currentTime - request->arrivalTime : 0;
        double serviceTime = seekTime + rotationalLatency + transferTime;
        double finishTime = request->arrivalTime + waitTime + serviceTime;
        currentTime = finishTime;
        currCylinder = request->cylinder;
        int psn_after = request->psn + request->request_size;
        double sectorsTransferred = request->request_size;
        currentSectorOffset = request->sector_offset + sectorsTransferred;
        currentSectorOffset = fmod(currentSectorOffset, SECTORSPERTRACK);
        int sectorsPerCylinder = SECTORSPERTRACK * TRACKSPERCYLINDER;
        int surface = (psn_after % sectorsPerCylinder) / SECTORSPERTRACK;

        fprintf(file, "%lf %lf %lf %d %d %d %lf %d\n",
                request->arrivalTime, finishTime, waitTime,
                psn_after, currCylinder, surface, currentSectorOffset, seekDistance);
    }

    fclose(file);
    free(processed);
}

int main(int argc, char *argv[]) {
    if (argc != 4 && argc != 5) {
        printf("Usage: %s <inputFile> <outputFile> <algorithm> [limit]\n", argv[0]);
        return 1;
    }

    char *inputFile = argv[1];
    char *outputFile = argv[2];
    char *alg = argv[3];
    int limit = -1;
    if (argc == 5) {
        limit = atoi(argv[4]);
    }

    FILE *file = fopen(inputFile, "r");
    if (file == 0) {
        printf("Error opening the input file\n");
        return 1;
    }

    int capacity = 50;
    int count = 0;
    DiskRequest *requests = (DiskRequest *)malloc(sizeof(DiskRequest) * capacity);
    if (requests == 0) {
        printf("Error allocating memory for requests\n");
        fclose(file);
        return 1;
    }

    char input[1024];
    while (fgets(input, 1024, file)) {
        if (count >= capacity) {
            capacity *= 2;
            requests = (DiskRequest *)realloc(requests, capacity * sizeof(DiskRequest));
            if (requests == 0) {
                printf("Error reallocating memory for requests\n");
                fclose(file);
                return 1;
            }
        }
        sscanf(input, "%lf %d %d", &requests[count].arrivalTime, &requests[count].lbn, &requests[count].request_size);
        calculate_disk_geometry(&requests[count]);
        count++;
        if (limit != -1 && count >= limit) {
            break;
        }
    }
    fclose(file);

    if (strcmp(alg, "SSTF") == 0 || strcmp(alg, "sstf") == 0) {
        sstf(requests, count, outputFile);
    } else {
        printf("Invalid algorithm given. Terminating program...\n");
        free(requests);
        return 1;
    }

    free(requests);
    return 0;
}
